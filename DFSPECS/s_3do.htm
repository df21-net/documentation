<html>

<head>
   <title>DF Specs - 3DO Files</title>
</head>

<body text="#000000" bgcolor="#C0C0C0" link="#00A000" vlink="#0000FF" alink="#FF0000">

<p><a href="df_specs.htm" target="_top"><img src="./images/gototoc.gif" alt="[TOC]"></a>
<a href="s_wax.htm"><img src="./images/gotoprev.gif" alt="[Prev]"></a>
<a href="s_vue.htm"><img src="./images/gotonext.gif" alt="[Next]"></a>
<h1> 3DO Files</h1>
<hr align="CENTER" size="2">
<p>

<ul>
<li><a href="#Gen">General  Description</a> </li>
<li><a href="#fh">File Header</a> </li>
<li><a href="#od">Object Definitions</a> </li>
</ul>

<p>
<a name="Gen"></a>
<h2>General  Description</h2>

<p>
    They contain the "3D" objects. (samples : MOUSEBOT, the DEATH STAR HOLOGRAM)
</p>

<p>
    They are text files containing a geometric description
    of a full 3D object, and are converted from 3D Studio .ASC format. They
    accept # comments.
</p>

<p>
    <strong>Note: </strong>Underscore ("_")  in the 3DO name makes other objects behind it show
    improperly - they get shown as if they are in front of the object rather
    than behind it (that excludes other 3DOs with underscore in their names for some reason).
    Underscore somehow changes sorting order, Z-buffering or  some other rendering parameter
    probably giving a benefit in speed on older machines.
</p>

<p><font size="+0">[by Michael Taylor (adapted)] </font></p>

<hr size="2" />

<a name="fh"></a>
<h2>3DO Format: Header</h2>

<table border="1" width="600">
<tr>
<td>
<pre>| 3DO 1.2
</pre>
</td>
</tr>
</table>

<p>
    Magic and Version Number: this is the word &quot;3DO&quot;
    followed by a version #, either 1.2, 1.20, or 1.30.
</p>

<p>Next comes several lines of header data.<br>
Included is the 3DO name, number of objects in the file, total number of
vertices, total number of polygons, palette used.</p>

<table border="1" width="600">
<tr>
<td>
<pre>| 3DONAME  cube
| OBJECTS  00001
| VERTICES 00008
| POLYGONS 00006
| PALETTE  METAL.PAL
</pre>
</td>
</tr>
</table>

<p>The palette file doesn't appear to relate to any PAL file
found in the GOB directory.<br>
[Could this be the type of rendering (metal, phong, ...) used in 3DS ?
[Yves]]<br>
</p>

<p>After the header comes a table of textures that are used.</p>

<table border="1" width="600">
<tr>
<td>
<pre>| TEXTURES 0
</pre>
</td>
</tr>
</table>

<p>or </p>

<table border="1" width="600">
<tr>
<td>
<pre>| TEXTURES 1
|   TEXTURE: IPDTENGR.BM
</pre>
</td>
</tr>
</table>


<p>If any textures are used then below the TEXTURES # line
is additional lines defining each texture file. It creates a zero based
array of textures for later usage by the objects.</p>

<!--  ----------------------------------------------------------------------------- -->

<hr size="2" />
<a name="od"></a>
    
<h2>Object Definitions</h2>

<p>[by Michael Taylor (adapted)]</p>

<p>
    After the header data comes each object's definition. A 3DO consists of one or
    more "object". Each object can have one texture associated with it.
</p>
<p>
    Each one starts with an object header and then the data. The object header
    is the word &quot;OBJECT&quot; followed by the object's name in double
    quotes. The object names seem irrelevant provided they are unique within
    the 3DO file.
</p>
    
<p>
    Next is the word &quot;TEXTURE&quot; followed by the texture
used for this object. If no texture is used then the value of -1 is used,
else an index into the texture table defined in the header data is given.
</p>

<table border="1" width="600">
<tr>
<td>
<pre>| OBJECT &quot;shuttle&quot;
| TEXTURE 0    # Index into texture array
|              # IFOCTGR.BM
</pre>
</td>
</tr>
</table>

<p>After the texture information, starts the actual geometric
description of the object.</p>

<p>First comes the vertices. The initial line is the word
VERTICES followed by the number of vertices defined. Then the vertices
are listed starting with 0 and going up to the number of vertices listed
on the VERTICES line. Each vertex is defined by 3 numbers; x, y, and z.
They represent relative locations on a 3-D graph. They are taken to 3 decimal
places.</p>

<table border="1" width="600">
<tr>
<td>
<pre>| VERTICES 8
|    0:   0.000   2.000  -0.050
|    1: -10.000   2.000  -5.550
| ...
</pre>
</td>
</tr>
</table>


<p>After the vertex information, comes the polygonal information.
Each object may be made up of either triangles or quads. The appropriate
header and number of polygons defined are listed, TRIANGLES for triangles
and QUADS for quadrilaterals. The polygons are described with a number
starting at 0, then the vertex number for each end point is given (3 for
triangles and 4 for quadrilaterals). Then a color is given to each polygon
(0 to 255), referencing the currently loaded level's <a href="s_palplt.htm">PAL</a>. Finally comes the 
shading used for each polygon. </p>

<table border="1" width="600">
<tr>
<td>
<pre>| TRIANGLES 12
| # Num  V1  V2  V3  Color  Shading
|   0:   1   2   3     0     PLANE
|   1:   0   1   3     0     PLANE
|   2:   5   1   0    62     FLAT
| ...  
</pre>
</td>
</tr>
</table>

<p>Also note that the vertices are listed in <em>clockwise</em> order
if you are facing directly at the polygon.<br>
[This simplifies hidden lines/surfaces algorithm, as you may determine
the facet orientation with 3 of them [Yves]] </p>

<p><b>Note</b> that in order to use a texture for a polygon,
you must set its shading to TEXTURE. </p>

<p>[end of Michael's section]</p>


<h3>Shading types</h3>

<table border="1" cellpadding="5">
<tr>
<td>FLAT</td>

<td>Normal, flat surface filled uniformly with the designated color</td>
</tr>

<tr>
<td>GOURAUD</td>

<td>As for FLAT, but with gouraud shading</td>
</tr>

<tr>
<td>VERTEX</td>

<td>Draw only vertexes of polygon (like Death Star holo), remainder will not be drawn</td>
</tr>

<tr>
<td>TEXTURE</td>

<td>Texture mapped</td>
</tr>

<tr>
<td>GOURTEX</td>

<td>Texture mapped plus gouraud shading</td>
</tr>

<tr>
<td>PLANE</td>

<td>Texture on a horizontal plane. Rendered the same as floor and ceiling textures
-- must be 64*64, affected by flr and ceil txoffsets, and scrolled by elevators
scroll_floor and scroll_ceiling</td>
</tr>
</table>

<!--  ----------------------------------------------------------------------------- -->

<h3>Texture mapping</h3>

<p><font size="+0">Here is a description of TEXTURE VERTICES and TEXTURE
QUADS/TRIANGLES, which Michael didn't fully cover. </font></p>

<p><font size="+0">If textures are used (TEXTURE, GOURTEX or PLANE shading),
then texture vertices and texture triangles/quads also need to be defined.
</font></p>

<h4>TEXTURE VERTICES:</h4>

<p>
    Each texture vertex is a U-V coordinate on the texture which is being mapped to the current 
    object. Values are between 0.000 and 1.000 where (0,0) is the bottom left corner of the texture
    and (1,1) is the top-right corner of the texture.
</p>

<h4>TEXTURE QUADS / TEXTURE TRIANGLES:</h4>
<p>
    These link texture vertices into a 3 or 4 sided polygon, hence designating
    which portion of the texture is to be mapped onto the polygon. The texture polygons
    correspond to the previously defined object polygons. TEXTURE TRIANGLE 0 maps to 
    TRIANGLE 0; TEXTURE TRIANGLE 1 maps to TRIANGLE 1; and so on.
</p>
<p>
    
    For example,
    if you have an 16 x 8 texture <br/>
    <img src="images\3dotex00.png" />
</p>

<p>
    with the following 4 texture vertices
</p>

<table border="1" cellpadding="5">
<tr><th>TEXTURE VERTICES:</th></tr>
<tr><td>| 0:</td><td>0.00</td><td>0.00</td></tr>
<tr><td>| 1:</td><td>0.00</td><td>0.50</td></tr>
<tr><td>| 2:</td><td>1.00</td><td>0.50</td></tr>
<tr><td>| 3:</td><td>1.00</td><td>0.00</td></tr>
</table>

<p>
and the following texture quad
<p>


<table border="1" cellpadding="5">
<tr><th>TEXTURE QUAD:</th></tr>
<tr><td>| 0:</td><td>0</td><td>1</td><td>2</td><td>	3</td></tr>
</table>

<p>
    ...the bottom half of the texture will be mapped onto QUAD 0 of the object with the first
    vertex of the TEXTURE QUAD mapping to the first vertex of the QUAD, the second vertex on the
    second, and so on. <br />
    <img src="images\3dotex01.png" />
</p>

<p>
    You can orientate the portion of texture on the polygon differently by shifting the sequence of the texture vertices
    (eg. 2,3,0,1 instead of 0,1,2,3 represents a rotation of 180 degrees). You can flip the texture by reversing the order of texture vertices 
    (eg. 3,2,1,0). You can even deform the texture by varying the order of the texture vertices
    (eg. 0,2,1,3).
</p>
  

<p>
    The mapped section of the texture will be scaled and stretched by the game engine to cover 
    the whole polygon face.
</p>

<p>
    Texture vertices can be re-used as many times as you want, for example, if you wish to map
    the same section of a texture to multiple polygons.
</p>

<p>
    <strong>Note: </strong>TEXTURE VERTICES and TEXTURE QUADS / TRIANGLES are also defined for PLANE 
    fill, but the game engine <em>ignores</em> the values. Polygons with PLANE shading will have the selected texture
    rendered on them as a repeating (tiled) 64x64 image exactly like a sector floor or ceiling. The texture will always
    be rendered on the horizontal (X-Z) plane, therefore for a correct appearance the 3DO's polygons must
    remain oriented parallel to the X-Z plane. (Rotating the 3DO with a VUE, for instance, will cause
    strange looking results...)
</p>

<br />
<br />
</body>
</html>